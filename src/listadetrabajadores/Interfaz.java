/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package listadetrabajadores;

import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 *
 * @author Alexeltocayo
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() throws IOException, FileNotFoundException, ClassNotFoundException, SAXException {
        initComponents();
        
        
        this.platos_que_puede_cocinar_cocinero.removeAllItems();
        
        this.alergio_cliente.removeAllItems();
        
        this.reserva_cliente.removeAllItems();
        
        this.clientes_que_pagan_en_restaurante.removeAllItems();
        
        this.restaurantes_donde_se_sirve_un_plato.removeAllItems();
        
        this.controller = new Controlador();
        
        this.modelo_cocineros = new DefaultListModel<>();
        
        this.agregarCocinerosAModelo();
        
        this.lista_de_cocineros.setModel(modelo_cocineros);
        
        this.modelo_platos = new DefaultListModel<>();
        
        this.agregarPlatosAModelo();
        
        this.lista_de_platos.setModel(modelo_platos);
        
        this.modelo_restaurantes = new DefaultListModel<>();
        
        this.agregarRestaurantesAModelo();
        
        this.lista_de_restaurantes.setModel(this.modelo_restaurantes);
        
        this.modelo_clientes = new DefaultListModel();
        
        this.agregarClientesAModelo();
        
        this.lista_de_clientes.setModel(this.modelo_clientes);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel_platos = new javax.swing.JTabbedPane();
        Cocineros = new javax.swing.JPanel();
        agregar_cocinero = new javax.swing.JButton();
        borrar_cocinero = new javax.swing.JButton();
        seleccionar_cocinero = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista_de_cocineros = new javax.swing.JList<>();
        guardar_cocinero = new javax.swing.JButton();
        Salir = new javax.swing.JButton();
        panel_de_introduccion_cocineros = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        salario_cocinero = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        especialidad_cocinero = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        numero_de_premios = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        nombre_del_cocinero = new javax.swing.JTextArea();
        modificar_cocinero = new javax.swing.JButton();
        boton_cancelar_cocinero = new javax.swing.JButton();
        platos_que_puede_cocinar_cocinero = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        Platos = new javax.swing.JPanel();
        agregar_plato = new javax.swing.JButton();
        borrar_plato = new javax.swing.JButton();
        seleccionar_plato = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lista_de_platos = new javax.swing.JList<>();
        guardar_plato = new javax.swing.JButton();
        salir_plato = new javax.swing.JButton();
        panel_de_introduccion_platos = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        num_ingredientes_plato = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        sabor_principal_del_plato = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        tiempo_de_prep_del_plato = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        nombre_del_plato = new javax.swing.JTextArea();
        modificar_plato = new javax.swing.JButton();
        boton_cancelar_plato = new javax.swing.JButton();
        restaurantes_donde_se_sirve_un_plato = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        Restaurantes = new javax.swing.JPanel();
        agregar_restaurante = new javax.swing.JButton();
        borrar_restaurante = new javax.swing.JButton();
        seleccionar_restaurante = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lista_de_restaurantes = new javax.swing.JList<>();
        guardar_restaurante = new javax.swing.JButton();
        salir_restaurante = new javax.swing.JButton();
        panel_de_introduccion_restaurantes = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        direccion_del_restaurante = new javax.swing.JTextArea();
        jScrollPane15 = new javax.swing.JScrollPane();
        aforo_maximo = new javax.swing.JTextArea();
        jScrollPane16 = new javax.swing.JScrollPane();
        numero_de_empleados = new javax.swing.JTextArea();
        jScrollPane17 = new javax.swing.JScrollPane();
        nombre_del_restaurante = new javax.swing.JTextArea();
        modificar_restaurante = new javax.swing.JButton();
        boton_cancelar_restaurante = new javax.swing.JButton();
        clientes_que_pagan_en_restaurante = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        Clientes = new javax.swing.JPanel();
        agregar_cliente = new javax.swing.JButton();
        borrar_cliente = new javax.swing.JButton();
        seleccionar_cliente = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lista_de_clientes = new javax.swing.JList<>();
        guardar_cliente = new javax.swing.JButton();
        salir_cliente = new javax.swing.JButton();
        panel_de_introduccion_clientes = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        coste_de_la_comida = new javax.swing.JTextArea();
        jScrollPane21 = new javax.swing.JScrollPane();
        nombre_del_cliente = new javax.swing.JTextArea();
        alergio_cliente = new javax.swing.JComboBox<>();
        reserva_cliente = new javax.swing.JComboBox<>();
        modificar_cliente = new javax.swing.JButton();
        boton_cancelar_cliente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        agregar_cocinero.setText("Agregar");
        agregar_cocinero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_cocineroActionPerformed(evt);
            }
        });

        borrar_cocinero.setText("Borrar");
        borrar_cocinero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrar_cocineroActionPerformed(evt);
            }
        });

        seleccionar_cocinero.setText("Seleccionar");
        seleccionar_cocinero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionar_cocineroActionPerformed(evt);
            }
        });

        lista_de_cocineros.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lista_de_cocineros);

        guardar_cocinero.setText("Guardar");
        guardar_cocinero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_cocineroActionPerformed(evt);
            }
        });

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre del cocinero");

        jLabel2.setText("Salario");

        jLabel3.setText("Especialidad del cocinero");

        jLabel4.setText("Premios");

        salario_cocinero.setEditable(false);
        salario_cocinero.setBackground(new java.awt.Color(240, 240, 240));
        salario_cocinero.setColumns(20);
        jScrollPane6.setViewportView(salario_cocinero);

        especialidad_cocinero.setEditable(false);
        especialidad_cocinero.setBackground(new java.awt.Color(240, 240, 240));
        especialidad_cocinero.setColumns(20);
        jScrollPane7.setViewportView(especialidad_cocinero);

        numero_de_premios.setEditable(false);
        numero_de_premios.setBackground(new java.awt.Color(240, 240, 240));
        numero_de_premios.setColumns(20);
        jScrollPane8.setViewportView(numero_de_premios);

        nombre_del_cocinero.setEditable(false);
        nombre_del_cocinero.setBackground(new java.awt.Color(240, 240, 240));
        nombre_del_cocinero.setColumns(20);
        jScrollPane9.setViewportView(nombre_del_cocinero);

        javax.swing.GroupLayout panel_de_introduccion_cocinerosLayout = new javax.swing.GroupLayout(panel_de_introduccion_cocineros);
        panel_de_introduccion_cocineros.setLayout(panel_de_introduccion_cocinerosLayout);
        panel_de_introduccion_cocinerosLayout.setHorizontalGroup(
            panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_de_introduccion_cocinerosLayout.createSequentialGroup()
                .addGroup(panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane9)
                    .addGroup(panel_de_introduccion_cocinerosLayout.createSequentialGroup()
                        .addGroup(panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(231, 231, 231)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        panel_de_introduccion_cocinerosLayout.setVerticalGroup(
            panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_de_introduccion_cocinerosLayout.createSequentialGroup()
                .addGroup(panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(23, 23, 23)
                .addGroup(panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(panel_de_introduccion_cocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                    .addComponent(jScrollPane8)))
        );

        modificar_cocinero.setText("Modificar");
        modificar_cocinero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificar_cocineroActionPerformed(evt);
            }
        });

        boton_cancelar_cocinero.setText("Cancelar");
        boton_cancelar_cocinero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cancelar_cocineroActionPerformed(evt);
            }
        });

        platos_que_puede_cocinar_cocinero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel17.setText("Platos que cocina este cocinero:");

        javax.swing.GroupLayout CocinerosLayout = new javax.swing.GroupLayout(Cocineros);
        Cocineros.setLayout(CocinerosLayout);
        CocinerosLayout.setHorizontalGroup(
            CocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CocinerosLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(CocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CocinerosLayout.createSequentialGroup()
                        .addComponent(panel_de_introduccion_cocineros, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(CocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(platos_que_puede_cocinar_cocinero, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(CocinerosLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane1))
                .addGap(32, 32, 32)
                .addGroup(CocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(seleccionar_cocinero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agregar_cocinero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Salir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guardar_cocinero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(borrar_cocinero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modificar_cocinero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boton_cancelar_cocinero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        CocinerosLayout.setVerticalGroup(
            CocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CocinerosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(CocinerosLayout.createSequentialGroup()
                        .addComponent(agregar_cocinero)
                        .addGap(58, 58, 58)
                        .addComponent(borrar_cocinero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seleccionar_cocinero)
                        .addGap(61, 61, 61)
                        .addComponent(modificar_cocinero))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CocinerosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CocinerosLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(24, 24, 24)
                        .addComponent(platos_que_puede_cocinar_cocinero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                        .addComponent(guardar_cocinero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(boton_cancelar_cocinero)
                        .addGap(89, 89, 89)
                        .addComponent(Salir))
                    .addComponent(panel_de_introduccion_cocineros, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        Panel_platos.addTab("Cocineros", Cocineros);

        agregar_plato.setText("Agregar");
        agregar_plato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_platoActionPerformed(evt);
            }
        });

        borrar_plato.setText("Borrar");
        borrar_plato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrar_platoActionPerformed(evt);
            }
        });

        seleccionar_plato.setText("Seleccionar");
        seleccionar_plato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionar_platoActionPerformed(evt);
            }
        });

        lista_de_platos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(lista_de_platos);

        guardar_plato.setText("Guardar");
        guardar_plato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_platoActionPerformed(evt);
            }
        });

        salir_plato.setText("Salir");
        salir_plato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir_platoActionPerformed(evt);
            }
        });

        jLabel5.setText("Nombre");

        jLabel6.setText("Número de ingredientes que contiene el plato");

        jLabel7.setText("Sabor principal");

        jLabel8.setText("Tiempo de preparación");

        num_ingredientes_plato.setEditable(false);
        num_ingredientes_plato.setBackground(new java.awt.Color(240, 240, 240));
        num_ingredientes_plato.setColumns(20);
        jScrollPane10.setViewportView(num_ingredientes_plato);

        sabor_principal_del_plato.setEditable(false);
        sabor_principal_del_plato.setBackground(new java.awt.Color(240, 240, 240));
        sabor_principal_del_plato.setColumns(20);
        jScrollPane11.setViewportView(sabor_principal_del_plato);

        tiempo_de_prep_del_plato.setEditable(false);
        tiempo_de_prep_del_plato.setBackground(new java.awt.Color(240, 240, 240));
        tiempo_de_prep_del_plato.setColumns(20);
        jScrollPane12.setViewportView(tiempo_de_prep_del_plato);

        nombre_del_plato.setEditable(false);
        nombre_del_plato.setBackground(new java.awt.Color(240, 240, 240));
        nombre_del_plato.setColumns(20);
        jScrollPane13.setViewportView(nombre_del_plato);

        javax.swing.GroupLayout panel_de_introduccion_platosLayout = new javax.swing.GroupLayout(panel_de_introduccion_platos);
        panel_de_introduccion_platos.setLayout(panel_de_introduccion_platosLayout);
        panel_de_introduccion_platosLayout.setHorizontalGroup(
            panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_de_introduccion_platosLayout.createSequentialGroup()
                .addGroup(panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane11)
                    .addComponent(jScrollPane13)
                    .addGroup(panel_de_introduccion_platosLayout.createSequentialGroup()
                        .addGroup(panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(246, 246, 246)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_de_introduccion_platosLayout.createSequentialGroup()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(211, 211, 211))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_de_introduccion_platosLayout.createSequentialGroup()
                        .addGroup(panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        panel_de_introduccion_platosLayout.setVerticalGroup(
            panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_de_introduccion_platosLayout.createSequentialGroup()
                .addGroup(panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(23, 23, 23)
                .addGroup(panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jScrollPane10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(panel_de_introduccion_platosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                    .addComponent(jScrollPane12)))
        );

        modificar_plato.setText("Modificar");
        modificar_plato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificar_platoActionPerformed(evt);
            }
        });

        boton_cancelar_plato.setText("Cancelar");
        boton_cancelar_plato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cancelar_platoActionPerformed(evt);
            }
        });

        restaurantes_donde_se_sirve_un_plato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel19.setText("Restaurantes donde se sirve este plato:");

        javax.swing.GroupLayout PlatosLayout = new javax.swing.GroupLayout(Platos);
        Platos.setLayout(PlatosLayout);
        PlatosLayout.setHorizontalGroup(
            PlatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlatosLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(PlatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlatosLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
                        .addGap(32, 32, 32))
                    .addGroup(PlatosLayout.createSequentialGroup()
                        .addComponent(panel_de_introduccion_platos, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addGroup(PlatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(restaurantes_donde_se_sirve_un_plato, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(PlatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(seleccionar_plato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agregar_plato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(salir_plato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guardar_plato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(borrar_plato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modificar_plato, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boton_cancelar_plato, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        PlatosLayout.setVerticalGroup(
            PlatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PlatosLayout.createSequentialGroup()
                        .addComponent(agregar_plato)
                        .addGap(58, 58, 58)
                        .addComponent(borrar_plato)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seleccionar_plato)
                        .addGap(61, 61, 61)
                        .addComponent(modificar_plato))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(PlatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlatosLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(panel_de_introduccion_platos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PlatosLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(restaurantes_donde_se_sirve_un_plato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                        .addComponent(guardar_plato)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(boton_cancelar_plato)
                        .addGap(88, 88, 88)
                        .addComponent(salir_plato)))
                .addContainerGap())
        );

        Panel_platos.addTab("Platos", Platos);

        agregar_restaurante.setText("Agregar");
        agregar_restaurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_restauranteActionPerformed(evt);
            }
        });

        borrar_restaurante.setText("Borrar");
        borrar_restaurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrar_restauranteActionPerformed(evt);
            }
        });

        seleccionar_restaurante.setText("Seleccionar");
        seleccionar_restaurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionar_restauranteActionPerformed(evt);
            }
        });

        lista_de_restaurantes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(lista_de_restaurantes);

        guardar_restaurante.setText("Guardar");
        guardar_restaurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_restauranteActionPerformed(evt);
            }
        });

        salir_restaurante.setText("Salir");
        salir_restaurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir_restauranteActionPerformed(evt);
            }
        });

        jLabel9.setText("Nombre");

        jLabel10.setText("Número de restaurantes donde se prepara");

        jLabel11.setText("Sabor principal");

        jLabel12.setText("Tiempo de preparación");

        direccion_del_restaurante.setEditable(false);
        direccion_del_restaurante.setBackground(new java.awt.Color(240, 240, 240));
        direccion_del_restaurante.setColumns(20);
        jScrollPane14.setViewportView(direccion_del_restaurante);

        aforo_maximo.setEditable(false);
        aforo_maximo.setBackground(new java.awt.Color(240, 240, 240));
        aforo_maximo.setColumns(20);
        jScrollPane15.setViewportView(aforo_maximo);

        numero_de_empleados.setEditable(false);
        numero_de_empleados.setBackground(new java.awt.Color(240, 240, 240));
        numero_de_empleados.setColumns(20);
        jScrollPane16.setViewportView(numero_de_empleados);

        nombre_del_restaurante.setEditable(false);
        nombre_del_restaurante.setBackground(new java.awt.Color(240, 240, 240));
        nombre_del_restaurante.setColumns(20);
        jScrollPane17.setViewportView(nombre_del_restaurante);

        javax.swing.GroupLayout panel_de_introduccion_restaurantesLayout = new javax.swing.GroupLayout(panel_de_introduccion_restaurantes);
        panel_de_introduccion_restaurantes.setLayout(panel_de_introduccion_restaurantesLayout);
        panel_de_introduccion_restaurantesLayout.setHorizontalGroup(
            panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_de_introduccion_restaurantesLayout.createSequentialGroup()
                .addGroup(panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane15)
                    .addComponent(jScrollPane17)
                    .addGroup(panel_de_introduccion_restaurantesLayout.createSequentialGroup()
                        .addGroup(panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11))
                        .addGap(246, 246, 246)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_de_introduccion_restaurantesLayout.createSequentialGroup()
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(211, 211, 211))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_de_introduccion_restaurantesLayout.createSequentialGroup()
                        .addGroup(panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        panel_de_introduccion_restaurantesLayout.setVerticalGroup(
            panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_de_introduccion_restaurantesLayout.createSequentialGroup()
                .addGroup(panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(23, 23, 23)
                .addGroup(panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jScrollPane14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(panel_de_introduccion_restaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                    .addComponent(jScrollPane16)))
        );

        modificar_restaurante.setText("Modificar");
        modificar_restaurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificar_restauranteActionPerformed(evt);
            }
        });

        boton_cancelar_restaurante.setText("Cancelar");
        boton_cancelar_restaurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cancelar_restauranteActionPerformed(evt);
            }
        });

        clientes_que_pagan_en_restaurante.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel21.setText("Clientes que pagan en este restaurante:");

        javax.swing.GroupLayout RestaurantesLayout = new javax.swing.GroupLayout(Restaurantes);
        Restaurantes.setLayout(RestaurantesLayout);
        RestaurantesLayout.setHorizontalGroup(
            RestaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RestaurantesLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(RestaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RestaurantesLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 958, Short.MAX_VALUE)
                        .addGap(32, 32, 32))
                    .addGroup(RestaurantesLayout.createSequentialGroup()
                        .addComponent(panel_de_introduccion_restaurantes, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addGroup(RestaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(clientes_que_pagan_en_restaurante, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(RestaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(seleccionar_restaurante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agregar_restaurante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(salir_restaurante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guardar_restaurante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(borrar_restaurante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modificar_restaurante, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boton_cancelar_restaurante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        RestaurantesLayout.setVerticalGroup(
            RestaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RestaurantesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RestaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(RestaurantesLayout.createSequentialGroup()
                        .addComponent(agregar_restaurante)
                        .addGap(58, 58, 58)
                        .addComponent(borrar_restaurante)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seleccionar_restaurante)
                        .addGap(61, 61, 61)
                        .addComponent(modificar_restaurante))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(RestaurantesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(RestaurantesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                        .addComponent(guardar_restaurante)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton_cancelar_restaurante)
                        .addGap(102, 102, 102)
                        .addComponent(salir_restaurante))
                    .addComponent(panel_de_introduccion_restaurantes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(RestaurantesLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addComponent(clientes_que_pagan_en_restaurante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        Panel_platos.addTab("Restaurantes", Restaurantes);

        agregar_cliente.setText("Agregar");
        agregar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregar_clienteActionPerformed(evt);
            }
        });

        borrar_cliente.setText("Borrar");
        borrar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrar_clienteActionPerformed(evt);
            }
        });

        seleccionar_cliente.setText("Seleccionar");
        seleccionar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionar_clienteActionPerformed(evt);
            }
        });

        lista_de_clientes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(lista_de_clientes);

        guardar_cliente.setText("Guardar");
        guardar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_clienteActionPerformed(evt);
            }
        });

        salir_cliente.setText("Salir");
        salir_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir_clienteActionPerformed(evt);
            }
        });

        jLabel13.setText("Nombre del cliente");

        jLabel14.setText("Coste de la comida en el restaurante");

        jLabel15.setText("Alergico");

        jLabel16.setText("Reserva");

        coste_de_la_comida.setEditable(false);
        coste_de_la_comida.setBackground(new java.awt.Color(240, 240, 240));
        coste_de_la_comida.setColumns(20);
        jScrollPane18.setViewportView(coste_de_la_comida);

        nombre_del_cliente.setEditable(false);
        nombre_del_cliente.setBackground(new java.awt.Color(240, 240, 240));
        nombre_del_cliente.setColumns(20);
        jScrollPane21.setViewportView(nombre_del_cliente);

        alergio_cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        reserva_cliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout panel_de_introduccion_clientesLayout = new javax.swing.GroupLayout(panel_de_introduccion_clientes);
        panel_de_introduccion_clientes.setLayout(panel_de_introduccion_clientesLayout);
        panel_de_introduccion_clientesLayout.setHorizontalGroup(
            panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_de_introduccion_clientesLayout.createSequentialGroup()
                .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane21)
                        .addGroup(panel_de_introduccion_clientesLayout.createSequentialGroup()
                            .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel13)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(231, 231, 231)))
                    .addComponent(alergio_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16)
                        .addComponent(jLabel14))
                    .addComponent(reserva_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panel_de_introduccion_clientesLayout.setVerticalGroup(
            panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_de_introduccion_clientesLayout.createSequentialGroup()
                .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addGap(23, 23, 23)
                .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane21, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(jScrollPane18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(panel_de_introduccion_clientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alergio_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reserva_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67))
        );

        modificar_cliente.setText("Modificar");
        modificar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificar_clienteActionPerformed(evt);
            }
        });

        boton_cancelar_cliente.setText("Cancelar");
        boton_cancelar_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_cancelar_clienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClientesLayout = new javax.swing.GroupLayout(Clientes);
        Clientes.setLayout(ClientesLayout);
        ClientesLayout.setHorizontalGroup(
            ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientesLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClientesLayout.createSequentialGroup()
                        .addComponent(panel_de_introduccion_clientes, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 230, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addGap(32, 32, 32)
                .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(seleccionar_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(agregar_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(salir_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(guardar_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(borrar_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modificar_cliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boton_cancelar_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        ClientesLayout.setVerticalGroup(
            ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClientesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ClientesLayout.createSequentialGroup()
                        .addComponent(agregar_cliente)
                        .addGap(58, 58, 58)
                        .addComponent(borrar_cliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seleccionar_cliente)
                        .addGap(61, 61, 61)
                        .addComponent(modificar_cliente))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(ClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClientesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panel_de_introduccion_clientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ClientesLayout.createSequentialGroup()
                        .addGap(18, 187, Short.MAX_VALUE)
                        .addComponent(guardar_cliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(boton_cancelar_cliente)
                        .addGap(89, 89, 89)
                        .addComponent(salir_cliente)))
                .addContainerGap())
        );

        Panel_platos.addTab("Clientes", Clientes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel_platos)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel_platos)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

 /*                                                                        MÉTODOS DE MODIFICACIÓN DE LAS ÁREAS DE INSERCIÓN                                                                      */
    
    public void deshabilitarBotonesCocineros(){
        
        this.agregar_cocinero.setEnabled(false);
        this.borrar_cocinero.setEnabled(false);
        this.modificar_cocinero.setEnabled(false);
        this.seleccionar_cocinero.setEnabled(false);
    }
    
    public void vaciarTextAreasCocineros(){
        
        this.nombre_del_cocinero.setText("");
        this.salario_cocinero.setText("");
        this.numero_de_premios.setText("");
        this.especialidad_cocinero.setText("");
    }
    
    public void hacerEditableLasAreasDeInsercionCocinero(){
        
        this.nombre_del_cocinero.setEditable(true);
        this.salario_cocinero.setEditable(true);
        this.numero_de_premios.setEditable(true);
        this.especialidad_cocinero.setEditable(true);
    }
    
    public void noHacerEditableLasAreasDeInsercionCocinero(){
        
        this.nombre_del_cocinero.setEditable(false);
        this.salario_cocinero.setEditable(false);
        this.numero_de_premios.setEditable(false);
        this.especialidad_cocinero.setEditable(false);
    }
    
    public void habilitarBotonesCocineros(){
        
        this.agregar_cocinero.setEnabled(true);
        this.borrar_cocinero.setEnabled(true);
        this.modificar_cocinero.setEnabled(true);
        this.seleccionar_cocinero.setEnabled(true);
    }
    
    public void ponerFondoDeInserciónARojoCocineros(){
        
        this.nombre_del_cocinero.setBackground(Color.LIGHT_GRAY);
        this.salario_cocinero.setBackground(Color.LIGHT_GRAY);
        this.especialidad_cocinero.setBackground(Color.LIGHT_GRAY);
        this.numero_de_premios.setBackground(Color.LIGHT_GRAY);
    }
    
    public void ponerFondoDeInserciónANormalCocineros(){
        
        this.nombre_del_cocinero.setBackground(this.lista_de_cocineros.getBackground());
        this.salario_cocinero.setBackground(this.lista_de_cocineros.getBackground());
        this.especialidad_cocinero.setBackground(this.lista_de_cocineros.getBackground());
        this.numero_de_premios.setBackground(this.lista_de_cocineros.getBackground());
    }
    
    public void agregarCocinerosAModelo(){
        
        for(int index = 0; index < this.controller.lista_cocineros.size(); index++){
            
            this.modelo_cocineros.addElement(this.controller.getCocineroAtPosition(index).getNombre());
        }
    }
    
    public void agregarTodosLosPlatosACombobox(){
        
        for(int index = 0; index < this.controller.lista_de_platos.size(); index++){
            
            this.platos_que_puede_cocinar_cocinero.addItem(this.controller.lista_de_platos.get(index).getNombre_plato());
        }
    }
    
    
/*                                                                        MÉTODOS DE MODIFICACIÓN DE LAS ÁREAS DE INSERCIÓN                                                                      */
     

/*################################################################################################################################################################################################

                                                                               CÓDIGO DE LA PESTAÑA DE COCINEROS                                                                         

############################################################################################################################################################################################*/

    
    public void crearEInsertarCocinero(){
        
        Cocinero antonieta;
        
        if(this.controller.lista_cocineros.size() > 0){
            antonieta = new Cocinero(this.controller.getCocineroAtPosition(this.controller.getCocineroListSize() - 1).getId_cocinero() + 1, Double.parseDouble(this.salario_cocinero.getText()), this.nombre_del_cocinero.getText(), this.especialidad_cocinero.getText(), Integer.valueOf(this.numero_de_premios.getText()));
        }else{
            antonieta = new Cocinero(1, Double.parseDouble(this.salario_cocinero.getText()), this.nombre_del_cocinero.getText(), this.especialidad_cocinero.getText(), Integer.valueOf(this.numero_de_premios.getText()));
        }
            
        this.modelo_cocineros.addElement(antonieta.getNombre());

        this.controller.addCocineroToList(antonieta);

        this.lista_de_cocineros.setModel(modelo_cocineros);
        
        if(this.platos_que_puede_cocinar_cocinero.getSelectedIndex() != -1){    
            antonieta.setId_del_plato_que_cocina_este_cocinero(this.buscarPlatoPorNombreYDevolverSuId(this.platos_que_puede_cocinar_cocinero.getSelectedItem().toString()));
        }else{
            antonieta.setId_del_plato_que_cocina_este_cocinero(0);
        }
    }
    
    public int buscarPlatoPorNombreYDevolverSuId(String nombre_del_plato){
        
        for(int index = 0; index < this.controller.lista_de_platos.size(); index++){
            
            if(nombre_del_plato.equals(this.controller.lista_de_platos.get(index).getNombre_plato())){
                
                return this.controller.lista_de_platos.get(index).getId_plato();
            }
        }
        
        return -1;
    }
    
    public void buscarYModificarCocinero(){

        this.modelo_cocineros.setElementAt(this.nombre_del_cocinero.getText(), this.indice_seleccionado);
        
//System.out.println("Valor del textbox de la especialidad4: " + this.espcialidad_cocinero.getText());

        this.controller.getCocineroAtPosition(this.indice_seleccionado).setEspecialidad(this.especialidad_cocinero.getText());
        this.controller.getCocineroAtPosition(this.indice_seleccionado).setNombre(this.nombre_del_cocinero.getText());
        this.controller.getCocineroAtPosition(this.indice_seleccionado).setSalario(Double.parseDouble(this.salario_cocinero.getText()));
        this.controller.getCocineroAtPosition(this.indice_seleccionado).setNumero_de_premios(Integer.parseInt(this.numero_de_premios.getText()));
        
        //Esta sentencia agregara al listbox de los cocineros el plato que pueden cocinar
//System.out.println("Numero del plato del cocinero " + this.controller.getCocineroAtPosition(this.indice_seleccionado).getNombre() + ": " + this.controller.getCocineroAtPosition(this.indice_seleccionado).getId_del_plato_que_cocina_este_cocinero());    
        
        if(this.buscarPlatoPorNombreYDevolverSuId(this.platos_que_puede_cocinar_cocinero.getSelectedItem().toString()) != -1){
            this.controller.getCocineroAtPosition(this.indice_seleccionado).setId_del_plato_que_cocina_este_cocinero(this.buscarPlatoPorNombreYDevolverSuId(this.platos_que_puede_cocinar_cocinero.getSelectedItem().toString()));
        }else{
            this.controller.getCocineroAtPosition(this.indice_seleccionado).setId_del_plato_que_cocina_este_cocinero(0);
        }

//System.out.println("Numero del plato del cocinero " + this.controller.getCocineroAtPosition(this.indice_seleccionado).getNombre() + ": " + this.controller.getCocineroAtPosition(this.indice_seleccionado).getId_del_plato_que_cocina_este_cocinero());    

        this.modelo_cocineros.removeAllElements();

        this.agregarCocinerosAModelo();

        this.lista_de_cocineros.setModel(modelo_cocineros);
    }
    
    public String buscarPlatoPorIdYDevolverSuNombre(int id){
        
        for(int index = 0; index < this.controller.lista_de_platos.size(); index++){
            
            if(this.controller.lista_de_platos.get(index).getId_plato() == id){
                
                return this.controller.lista_de_platos.get(index).getNombre_plato();
            }
        }
        
        return "";
    }
    
    public void seleccionarCocinero(){
//System.out.println("entramos en el metodo que hay en el action");

        this.platos_que_puede_cocinar_cocinero.removeAllItems();

        for(int index = 0; index < this.controller.getCocineroListSize(); index++){
      
            if(this.lista_de_cocineros.getSelectedIndex() == index){
//System.out.println("Entramos en el primer condicional"); 
                this.nombre_del_cocinero.setText(this.controller.getCocineroAtPosition(index).getNombre());
                this.salario_cocinero.setText(String.valueOf(this.controller.getCocineroAtPosition(index).getSalario()));
                this.especialidad_cocinero.setText(String.valueOf(this.controller.getCocineroAtPosition(index).getEspecialidad()));
                this.numero_de_premios.setText(String.valueOf(this.controller.getCocineroAtPosition(index).getNumero_de_premios()));
                
                this.platos_que_puede_cocinar_cocinero.addItem(this.buscarPlatoPorIdYDevolverSuNombre(this.controller.getCocineroAtPosition(index).getId_del_plato_que_cocina_este_cocinero()));
                //Aquí hay que poner el plato que cocina el cocinero
            }
        }
    }
    
    
/*################################################################################################################################################################################################
                                                      
                                                                            CÓDIGO DE LA PESTAÑA DE COCINEROS                                                                         
  
###############################################################################################################################################################################################*/
   
    
    
    private void modificar_cocineroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificar_cocineroActionPerformed

        if(this.lista_de_cocineros.getSelectedIndex() != -1){
            
            this.seleccionarCocinero();

            this.deshabilitarBotonesCocineros();

            this.ponerFondoDeInserciónARojoCocineros();

            this.panel_de_introduccion_cocineros.setBackground(Color.DARK_GRAY);

            this.hacerEditableLasAreasDeInsercionCocinero();
            
            this.indice_seleccionado = this.lista_de_cocineros.getSelectedIndex();
                        
            this.agregarTodosLosPlatosACombobox();
        }
        
    }//GEN-LAST:event_modificar_cocineroActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        
        /*try {
            this.controller.guardarEnFircheroTodosLosDatos();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        for(int index = 0; index < this.controller.getCocineroListSize(); index++){
            
            System.out.println(this.controller.lista_cocineros.get(index).toString());
        }
        
        try {
            this.controller.guardarTodosLosDatosEnXML();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_SalirActionPerformed

    private void guardar_cocineroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_cocineroActionPerformed

        if(this.salario_cocinero.getText() != "" && this.nombre_del_cocinero.getText() != ""){

            if(this.panel_de_introduccion_cocineros.getBackground() == Color.GRAY){

                this.crearEInsertarCocinero();

            }else if(this.panel_de_introduccion_cocineros.getBackground() == Color.DARK_GRAY){

                this.buscarYModificarCocinero();
                this.seleccionarCocinero();
            }

            this.panel_de_introduccion_cocineros.setBackground(this.Cocineros.getBackground()); //Ponemos el fondo del panel que engloba los textArea de inserción de datos  a un color normal

            this.habilitarBotonesCocineros();
            
            this.ponerFondoDeInserciónANormalCocineros();
            
            this.noHacerEditableLasAreasDeInsercionCocinero();
        }
    }//GEN-LAST:event_guardar_cocineroActionPerformed

    private void seleccionar_cocineroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionar_cocineroActionPerformed
        //System.out.println("Entramos en el action");
        this.seleccionarCocinero();
    }//GEN-LAST:event_seleccionar_cocineroActionPerformed

    private void borrar_cocineroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrar_cocineroActionPerformed

        this.indice_seleccionado = this.lista_de_cocineros.getSelectedIndex();
        
        this.modelo_cocineros.remove(this.indice_seleccionado);
        this.controller.removeCocineroAt(this.indice_seleccionado);

        this.vaciarTextAreasCocineros();
    }//GEN-LAST:event_borrar_cocineroActionPerformed

    private void agregar_cocineroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_cocineroActionPerformed
        
        this.deshabilitarBotonesCocineros();

        this.vaciarTextAreasCocineros();

        this.ponerFondoDeInserciónARojoCocineros();

        this.panel_de_introduccion_cocineros.setBackground(Color.GRAY);

        this.hacerEditableLasAreasDeInsercionCocinero();            
           
        this.agregarTodosLosPlatosACombobox();
    }//GEN-LAST:event_agregar_cocineroActionPerformed
                                     

/*===============================================================================================================================================================================================*/
 /*                                                                        MÉTODOS DE MODIFICACIÓN DE LAS ÁREAS DE INSERCIÓN                                                                      */
    
    public void deshabilitarBotonesPlatos(){
        
        this.agregar_plato.setEnabled(false);
        this.borrar_plato.setEnabled(false);
        this.modificar_plato.setEnabled(false);
        this.seleccionar_plato.setEnabled(false);
    }
    
    public void vaciarTextAreasPlatos(){
        
        this.nombre_del_plato.setText("");
        this.sabor_principal_del_plato.setText("");
        this.tiempo_de_prep_del_plato.setText("");
        this.num_ingredientes_plato.setText("");
    }
    
    public void hacerEditableLasAreasDeInsercionPlatos(){
        
        this.nombre_del_plato.setEditable(true);
        this.sabor_principal_del_plato.setEditable(true);
        this.tiempo_de_prep_del_plato.setEditable(true);
        this.num_ingredientes_plato.setEditable(true);
    }
    
    public void noHacerEditableLasAreasDeInsercionPlatos(){
        
        this.nombre_del_plato.setEditable(false);
        this.sabor_principal_del_plato.setEditable(false);
        this.tiempo_de_prep_del_plato.setEditable(false);
        this.num_ingredientes_plato.setEditable(false);
    }
    
    public void habilitarBotonesPlatos(){
        
        this.agregar_plato.setEnabled(true);
        this.borrar_plato.setEnabled(true);
        this.modificar_plato.setEnabled(true);
        this.seleccionar_plato.setEnabled(true);
    }
    
    public void ponerFondoDeInserciónARojoPlatos(){
        
        this.nombre_del_plato.setBackground(Color.LIGHT_GRAY);
        this.sabor_principal_del_plato.setBackground(Color.LIGHT_GRAY);
        this.tiempo_de_prep_del_plato.setBackground(Color.LIGHT_GRAY);
        this.num_ingredientes_plato.setBackground(Color.LIGHT_GRAY);
    }
    
    public void ponerFondoDeInserciónANormalPlatos(){
        
        this.nombre_del_plato.setBackground(this.lista_de_platos.getBackground());
        this.sabor_principal_del_plato.setBackground(this.lista_de_platos.getBackground());
        this.tiempo_de_prep_del_plato.setBackground(this.lista_de_platos.getBackground());
        this.num_ingredientes_plato.setBackground(this.lista_de_platos.getBackground());
    }
    
    public void agregarPlatosAModelo(){
        
        for(int index = 0; index < this.controller.lista_de_platos.size(); index++){
            
            this.modelo_platos.addElement(this.controller.getPlatoAtPosition(index).getNombre_plato());
        }
    }
    
    public void agregarRestaurantesACombobox(){
        
        this.restaurantes_donde_se_sirve_un_plato.removeAllItems();
        
        for(int index = 0; index < this.controller.lista_de_restaurantes.size(); index++){
            
            this.restaurantes_donde_se_sirve_un_plato.addItem(this.controller.lista_de_restaurantes.get(index).getNombre_restaurante());
        }
    }
    
    
/*                                                                        MÉTODOS DE MODIFICACIÓN DE LAS ÁREAS DE INSERCIÓN                                                                      */
    
    
/*################################################################################################################################################################################################
                                                      
                                                                                   CÓDIGO DE LA PESTAÑA DE PLATOS                                                                        
  
  ###############################################################################################################################################################################################*/
    
    public int buscarRestaurantePorNombreYDevolverSuId(String nombre_del_rest){
        
        for(int index = 0; index < this.controller.lista_de_restaurantes.size(); index++){
            
            if(nombre_del_rest.equals(this.controller.lista_de_restaurantes.get(index).getNombre_restaurante())){
                
                return this.controller.lista_de_restaurantes.get(index).getId_restaurante();
            }
        }
        
        return -1;
    }
    
    public void crearEInsertarPlato(){
        
        Plato york;
        
        if(this.controller.lista_de_platos.size() > 0){
            york = new Plato(this.controller.lista_de_platos.get(this.controller.lista_de_platos.size() - 1).getId_plato() + 1, this.nombre_del_plato.getText(), this.sabor_principal_del_plato.getText(), Integer.parseInt(this.tiempo_de_prep_del_plato.getText()), Integer.parseInt(this.num_ingredientes_plato.getText()));
        }else{
            york = new Plato(1, this.nombre_del_plato.getText(), this.sabor_principal_del_plato.getText(), Integer.parseInt(this.tiempo_de_prep_del_plato.getText()), Integer.parseInt(this.num_ingredientes_plato.getText()));
        }
        
        this.modelo_platos.addElement(york.getNombre_plato());

        this.controller.addPlatoToList(york);

        this.lista_de_platos.setModel(modelo_platos);
        
        if(this.restaurantes_donde_se_sirve_un_plato.getSelectedIndex() != -1){    
            york.setId_restaurante_donde_se_sirve_este_plato(this.buscarRestaurantePorNombreYDevolverSuId(this.restaurantes_donde_se_sirve_un_plato.getSelectedItem().toString()));
        }else{
            york.setId_restaurante_donde_se_sirve_este_plato(0);
        }
        
        for(int index = 0; index < this.controller.getPlatoListSize(); index++){
            
            System.out.println(this.controller.lista_de_platos.get(index).toString());
        }
    }
    
    public void buscarYModificarPlato(){

        this.modelo_platos.setElementAt(this.nombre_del_plato.getText(), this.indice_seleccionado);
        

        this.controller.getPlatoAtPosition(this.indice_seleccionado).setNombre_plato(this.nombre_del_plato.getText());
        this.controller.getPlatoAtPosition(this.indice_seleccionado).setSabor_principal(this.sabor_principal_del_plato.getText());
        this.controller.getPlatoAtPosition(this.indice_seleccionado).setTiempo_de_prep(Integer.parseInt(this.tiempo_de_prep_del_plato.getText()));
        this.controller.getPlatoAtPosition(this.indice_seleccionado).setNum_ingredientes(Integer.parseInt(this.num_ingredientes_plato.getText()));
        
        if(this.buscarRestaurantePorNombreYDevolverSuId(this.restaurantes_donde_se_sirve_un_plato.getSelectedItem().toString()) != -1){
            this.controller.getPlatoAtPosition(this.indice_seleccionado).setId_restaurante_donde_se_sirve_este_plato(this.buscarRestaurantePorNombreYDevolverSuId(this.restaurantes_donde_se_sirve_un_plato.getSelectedItem().toString()));
        }else{
            this.controller.getPlatoAtPosition(this.indice_seleccionado).setId_restaurante_donde_se_sirve_este_plato(0);
        }
            
        this.modelo_restaurantes.removeAllElements();
        
        this.agregarRestaurantesAModelo();

        this.lista_de_restaurantes.setModel(this.modelo_restaurantes);
    }
    
    public String buscarRestaurantePorIdYDevolverSuNombre(int id){
        
        for(int index = 0; index < this.controller.lista_de_restaurantes.size(); index++){
            
            if(this.controller.lista_de_restaurantes.get(index).getId_restaurante() == id){
                
                return this.controller.lista_de_restaurantes.get(index).getNombre_restaurante();
            }
        }
        
        return "";
    }
    
    
    public void seleccionarPlato(){
        
        this.restaurantes_donde_se_sirve_un_plato.removeAllItems();
        
        for(int index = 0; index < this.controller.getPlatoListSize(); index++){
            
            if(index == this.lista_de_platos.getSelectedIndex()){
                
                this.nombre_del_plato.setText(this.controller.getPlatoAtPosition(index).getNombre_plato());
                this.sabor_principal_del_plato.setText(String.valueOf(this.controller.getPlatoAtPosition(index).getSabor_principal()));
                this.num_ingredientes_plato.setText(String.valueOf(this.controller.getPlatoAtPosition(index).getNum_ingredientes()));
                this.tiempo_de_prep_del_plato.setText(String.valueOf(this.controller.getPlatoAtPosition(index).getTiempo_de_prep()));

                for(int index2 = 0; index2 < this.controller.getRestauranteListSize(); index2++){
                    
                    if(this.controller.lista_de_restaurantes.get(index2).getId_restaurante() == this.controller.getPlatoAtPosition(index).getId_restaurante_donde_se_sirve_este_plato()){
//System.out.println("ID del restaurante donde se srive este plato: " + this.controller.lista_de_restaurantes.get(index2).getId_restaurante() + " y su nombre " + this.controller.lista_de_restaurantes.get(index2).getNombre_restaurante());    
                        this.restaurantes_donde_se_sirve_un_plato.addItem(this.controller.lista_de_restaurantes.get(index2).getNombre_restaurante());
//System.out.println("Hemos puesto un restaurante a un plato que not enia restaurante");
                    }
                }
            }
        }
    }
    
    
    
 /*################################################################################################################################################################################################
                                                      
                                                                                   CÓDIGO DE LA PESTAÑA DE PLATOS                                                                        
  
  ###############################################################################################################################################################################################*/
    
    private void agregar_platoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_platoActionPerformed
 
            this.deshabilitarBotonesPlatos();

            this.vaciarTextAreasPlatos();

            this.ponerFondoDeInserciónARojoPlatos();

            this.panel_de_introduccion_platos.setBackground(Color.GRAY);

            this.hacerEditableLasAreasDeInsercionPlatos();

            this.agregarRestaurantesACombobox();
    }//GEN-LAST:event_agregar_platoActionPerformed

    private void borrar_platoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrar_platoActionPerformed
        
        this.indice_seleccionado = this.lista_de_platos.getSelectedIndex();
        
        this.modelo_platos.remove(this.indice_seleccionado);
        this.controller.removePlatoAt(this.indice_seleccionado);

        this.vaciarTextAreasPlatos();
    }//GEN-LAST:event_borrar_platoActionPerformed

    private void seleccionar_platoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionar_platoActionPerformed
        this.seleccionarPlato();
    }//GEN-LAST:event_seleccionar_platoActionPerformed

    private void guardar_platoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_platoActionPerformed
        if(this.nombre_del_plato.getText() != "" && this.sabor_principal_del_plato.getText() != ""){

            if(this.panel_de_introduccion_platos.getBackground() == Color.GRAY){

                this.crearEInsertarPlato();

            }else if(this.panel_de_introduccion_platos.getBackground() == Color.DARK_GRAY){

                this.buscarYModificarPlato();
                this.seleccionarPlato();
            }

            this.panel_de_introduccion_platos.setBackground(this.Platos.getBackground());

            this.habilitarBotonesPlatos();
            
            this.ponerFondoDeInserciónANormalPlatos();
            
            this.noHacerEditableLasAreasDeInsercionPlatos();
        }
    }//GEN-LAST:event_guardar_platoActionPerformed

    private void salir_platoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir_platoActionPerformed
       
        /*try {
            this.controller.guardarEnFircheroTodosLosDatos();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        for(int index = 0; index < this.controller.getPlatoListSize(); index++){
            
            System.out.println(this.controller.lista_de_platos.get(index).toString());
        }
        
        try {
            this.controller.guardarTodosLosDatosEnXML();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_salir_platoActionPerformed

    private void modificar_platoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificar_platoActionPerformed
        
        if(this.lista_de_platos.getSelectedIndex() != -1){
            //this.indice_seleccionado = this.lista_de_restaurantes.getSelectedIndex();
            
            this.seleccionarPlato();
            
            this.agregarRestaurantesACombobox();

            this.deshabilitarBotonesPlatos();

            this.ponerFondoDeInserciónARojoPlatos();

            this.panel_de_introduccion_platos.setBackground(Color.DARK_GRAY);

            this.hacerEditableLasAreasDeInsercionPlatos();
            
            this.indice_seleccionado = this.lista_de_platos.getSelectedIndex();
        }
    }//GEN-LAST:event_modificar_platoActionPerformed

    private void boton_cancelar_cocineroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cancelar_cocineroActionPerformed
        
        this.vaciarTextAreasCocineros();
        this.noHacerEditableLasAreasDeInsercionCocinero();
        this.habilitarBotonesCocineros();
        this.ponerFondoDeInserciónANormalCocineros();
        this.panel_de_introduccion_cocineros.setBackground(this.Cocineros.getBackground());
    }//GEN-LAST:event_boton_cancelar_cocineroActionPerformed

    private void boton_cancelar_platoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cancelar_platoActionPerformed
        
        this.vaciarTextAreasPlatos();
        this.noHacerEditableLasAreasDeInsercionPlatos();
        this.habilitarBotonesPlatos();
        this.ponerFondoDeInserciónANormalPlatos();
        this.panel_de_introduccion_platos.setBackground(this.Platos.getBackground());
    }//GEN-LAST:event_boton_cancelar_platoActionPerformed

/*===============================================================================================================================================================================================*/
 /*                                                                        MÉTODOS DE MODIFICACIÓN DE LAS ÁREAS DE INSERCIÓN                                                                      */
    
    public void deshabilitarBotonesRestaurantes(){
        
        this.agregar_restaurante.setEnabled(false);
        this.borrar_restaurante.setEnabled(false);
        this.modificar_restaurante.setEnabled(false);
        this.seleccionar_restaurante.setEnabled(false);
    }
    
    public void vaciarTextAreasRestaurantes(){
        
        this.nombre_del_restaurante.setText("");
        this.direccion_del_restaurante.setText("");
        this.aforo_maximo.setText("");
        this.numero_de_empleados.setText("");
    }
    
    public void hacerEditableLasAreasDeInsercionRestaurantes(){
        
        this.nombre_del_restaurante.setEditable(true);
        this.direccion_del_restaurante.setEditable(true);
        this.aforo_maximo.setEditable(true);
        this.numero_de_empleados.setEditable(true);
    }
    
    public void noHacerEditableLasAreasDeInsercionRestaurantes(){
        
        this.nombre_del_restaurante.setEditable(false);
        this.direccion_del_restaurante.setEditable(false);
        this.aforo_maximo.setEditable(false);
        this.numero_de_empleados.setEditable(false);
    }
    
    public void habilitarBotonesRestaurantes(){
        
        this.agregar_restaurante.setEnabled(true);
        this.borrar_restaurante.setEnabled(true);
        this.modificar_restaurante.setEnabled(true);
        this.seleccionar_restaurante.setEnabled(true);
    }
    
    public void ponerFondoDeInserciónARojoRestaurantes(){
        
        this.nombre_del_restaurante.setBackground(Color.LIGHT_GRAY);
        this.direccion_del_restaurante.setBackground(Color.LIGHT_GRAY);
        this.aforo_maximo.setBackground(Color.LIGHT_GRAY);
        this.numero_de_empleados.setBackground(Color.LIGHT_GRAY);
    }
    
    public void ponerFondoDeInserciónANormalRestaurantes(){
        
        this.nombre_del_restaurante.setBackground(this.lista_de_platos.getBackground());
        this.direccion_del_restaurante.setBackground(this.lista_de_platos.getBackground());
        this.aforo_maximo.setBackground(this.lista_de_platos.getBackground());
        this.numero_de_empleados.setBackground(this.lista_de_platos.getBackground());
    }
    
    public void agregarRestaurantesAModelo(){
        
        for(int index = 0; index < this.controller.lista_de_restaurantes.size(); index++){
            
            this.modelo_restaurantes.addElement(this.controller.getRestauranteAtPosition(index).getNombre_restaurante());
        }
    }
   
    public void agregarClientesACombobox(){
        
        this.clientes_que_pagan_en_restaurante.removeAllItems();
        
        for(int index = 0; index < this.controller.lista_de_clientes.size(); index++){
            
            this.clientes_que_pagan_en_restaurante.addItem(this.controller.lista_de_clientes.get(index).getNombre_cliente());
           // System.out.println("DEBUG: entramos y agregamos los clientes que hay:  " + this.clientes_que_pagan_en_restaurante.getItemAt(0));
        }
    }
    
/*                                                                        MÉTODOS DE MODIFICACIÓN DE LAS ÁREAS DE INSERCIÓN                                                                      */
    
    
/*################################################################################################################################################################################################
                                                      
                                                                                   CÓDIGO DE LA PESTAÑA DE RESTAURANTES                                                                        
  
  ###############################################################################################################################################################################################*/
    
    public void crearEInsertarRestaurante(){
        
        Restaurante ArmandoAlPantheon;
        
        if(this.controller.lista_de_restaurantes.size() > 0){
            ArmandoAlPantheon = new Restaurante(this.controller.lista_de_restaurantes.get(this.controller.lista_de_restaurantes.size() - 1).getId_restaurante() + 1, this.nombre_del_restaurante.getText(), this.direccion_del_restaurante.getText(), Integer.parseInt(this.aforo_maximo.getText()), Integer.parseInt(this.numero_de_empleados.getText()));
        }else{
            ArmandoAlPantheon = new Restaurante(1, this.nombre_del_restaurante.getText(), this.direccion_del_restaurante.getText(), Integer.parseInt(this.aforo_maximo.getText()), Integer.parseInt(this.numero_de_empleados.getText()));
        }
        
        if(this.clientes_que_pagan_en_restaurante.getSelectedIndex() != -1){    
            ArmandoAlPantheon.setId_cliente_que_al_que_restaurante_vende(this.buscarClientePorNombreYDevolverSuId(this.clientes_que_pagan_en_restaurante.getSelectedItem().toString()));
        }else{
            ArmandoAlPantheon.setId_cliente_que_al_que_restaurante_vende(0);
        } 
        
        this.modelo_restaurantes.addElement(ArmandoAlPantheon.getNombre_restaurante());

        this.controller.addRestauranteToList(ArmandoAlPantheon);

        this.lista_de_restaurantes.setModel(this.modelo_restaurantes);
       
    }
    
    public int buscarClientePorNombreYDevolverSuId(String nombre_del_cliente){
        
        for(int index = 0; index < this.controller.lista_de_clientes.size(); index++){
            
            if(nombre_del_cliente.equals(this.controller.lista_de_clientes.get(index).getNombre_cliente())){
                
                return this.controller.lista_de_clientes.get(index).getId_cliente();
            }
        }
        
        return -1;
    }
    
    public void buscarYModificarRestaurante(){

        this.modelo_restaurantes.setElementAt(this.nombre_del_restaurante.getText(), this.indice_seleccionado);
        
        this.controller.getRestauranteAtPosition(this.indice_seleccionado).setNombre_restaurante(this.nombre_del_restaurante.getText());
        this.controller.getRestauranteAtPosition(this.indice_seleccionado).setDireccion_restaurante(this.direccion_del_restaurante.getText());
        this.controller.getRestauranteAtPosition(this.indice_seleccionado).setAforo_maximo_restaurante(Integer.parseInt(this.aforo_maximo.getText()));
        this.controller.getRestauranteAtPosition(this.indice_seleccionado).setNumero_empleados_restaurante(Integer.parseInt(this.numero_de_empleados.getText()));
        
        if(this.buscarClientePorNombreYDevolverSuId(this.clientes_que_pagan_en_restaurante.getSelectedItem().toString()) != -1){
            this.controller.getRestauranteAtPosition(this.indice_seleccionado).setId_cliente_que_al_que_restaurante_vende(this.buscarClientePorNombreYDevolverSuId(this.clientes_que_pagan_en_restaurante.getSelectedItem().toString()));
        }else{
            this.controller.getRestauranteAtPosition(this.indice_seleccionado).setId_cliente_que_al_que_restaurante_vende(0);
        }
        
        this.modelo_restaurantes.removeAllElements();
        
        this.agregarRestaurantesAModelo();
        
        this.lista_de_restaurantes.setModel(this.modelo_restaurantes);
    }
    
    
    public void seleccionarRestaurante(){
        
        this.clientes_que_pagan_en_restaurante.removeAllItems();
        
        for(int index = 0; index < this.controller.getRestauranteListSize(); index++){
//System.out.println("DEBUG: valo de index " + index);  
//System.out.println("DEUBG: nombre del plato: " + this.controller.getPlatoAtPosition(index).getNombre_plato());
            if(this.lista_de_restaurantes.getSelectedIndex() == index){
                
                this.nombre_del_restaurante.setText(this.controller.getRestauranteAtPosition(index).getNombre_restaurante());
                this.direccion_del_restaurante.setText(this.controller.getRestauranteAtPosition(index).getDireccion_restaurante());
                this.aforo_maximo.setText(String.valueOf(this.controller.getRestauranteAtPosition(index).getAforo_maximo_restaurante()));
                this.numero_de_empleados.setText(String.valueOf(this.controller.getRestauranteAtPosition(index).getNumero_empleados_restaurante()));

System.out.println("I del cliente del restaurante:" + this.controller.getRestauranteAtPosition(index).getId_cliente_que_al_que_restaurante_vende());

                for(int index2 = 0; index2 < this.controller.getClienteListSize(); index2++){
                    
                    if(this.controller.lista_de_clientes.get(index2).getId_cliente() == this.controller.getRestauranteAtPosition(index).getId_cliente_que_al_que_restaurante_vende()){
System.out.println("ID del restaurante donde se srive este plato: " + this.controller.lista_de_restaurantes.get(index2).getId_restaurante() + " y su nombre " + this.controller.lista_de_restaurantes.get(index2).getNombre_restaurante());    
                        this.clientes_que_pagan_en_restaurante.addItem(this.controller.lista_de_clientes.get(index2).getNombre_cliente());
//System.out.println("Hemos puesto un restaurante a un plato que not enia restaurante");
                    }
                }
            }
        }
    }
    
    
    
 /*################################################################################################################################################################################################
                                                      
                                                                                   CÓDIGO DE LA PESTAÑA DE RESTAURANTES                                                                        
  
  ###############################################################################################################################################################################################*/
    
    private void agregar_restauranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_restauranteActionPerformed
        this.deshabilitarBotonesRestaurantes();

        this.vaciarTextAreasRestaurantes();

        this.ponerFondoDeInserciónARojoRestaurantes();

        this.agregarClientesACombobox();
        
        this.panel_de_introduccion_restaurantes.setBackground(Color.GRAY);

        this.hacerEditableLasAreasDeInsercionRestaurantes();
    }//GEN-LAST:event_agregar_restauranteActionPerformed

    private void borrar_restauranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrar_restauranteActionPerformed
        this.indice_seleccionado = this.lista_de_restaurantes.getSelectedIndex();
        
        this.modelo_restaurantes.remove(this.indice_seleccionado);
        this.controller.removeRestauranteAt(this.indice_seleccionado);

        this.vaciarTextAreasRestaurantes();
    }//GEN-LAST:event_borrar_restauranteActionPerformed

    private void seleccionar_restauranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionar_restauranteActionPerformed
        this.seleccionarRestaurante();
    }//GEN-LAST:event_seleccionar_restauranteActionPerformed

    private void guardar_restauranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_restauranteActionPerformed
        if(this.nombre_del_restaurante.getText() != "" && this.direccion_del_restaurante.getText() != ""){

            if(this.panel_de_introduccion_restaurantes.getBackground() == Color.GRAY){

                this.crearEInsertarRestaurante();

            }else if(this.panel_de_introduccion_restaurantes.getBackground() == Color.DARK_GRAY){

                this.buscarYModificarRestaurante();
                this.seleccionarRestaurante();
            }

            this.panel_de_introduccion_restaurantes.setBackground(this.Restaurantes.getBackground());

            this.habilitarBotonesRestaurantes();
            
            this.ponerFondoDeInserciónANormalRestaurantes();
            
            this.noHacerEditableLasAreasDeInsercionRestaurantes();
        }
    }//GEN-LAST:event_guardar_restauranteActionPerformed

    private void salir_restauranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir_restauranteActionPerformed
        
        /*try {
            this.controller.guardarEnFircheroTodosLosDatos();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        try {
            this.controller.guardarTodosLosDatosEnXML();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_salir_restauranteActionPerformed

    private void modificar_restauranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificar_restauranteActionPerformed
        if(this.lista_de_restaurantes.getSelectedIndex() != -1){
            
            this.indice_seleccionado = this.lista_de_restaurantes.getSelectedIndex();
            
            this.seleccionarRestaurante();
            
            this.agregarClientesACombobox();

            this.deshabilitarBotonesRestaurantes();

            this.ponerFondoDeInserciónARojoRestaurantes();

            this.panel_de_introduccion_restaurantes.setBackground(Color.DARK_GRAY);

            this.hacerEditableLasAreasDeInsercionRestaurantes();
        }
    }//GEN-LAST:event_modificar_restauranteActionPerformed

    private void boton_cancelar_restauranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cancelar_restauranteActionPerformed
        this.vaciarTextAreasRestaurantes();
        this.noHacerEditableLasAreasDeInsercionRestaurantes();
        this.habilitarBotonesRestaurantes();
        this.ponerFondoDeInserciónANormalRestaurantes();
        this.panel_de_introduccion_restaurantes.setBackground(this.Restaurantes.getBackground());
    }//GEN-LAST:event_boton_cancelar_restauranteActionPerformed

/*===============================================================================================================================================================================================*/
 /*                                                                        MÉTODOS DE MODIFICACIÓN DE LAS ÁREAS DE INSERCIÓN                                                                      */
    
    public void deshabilitarBotonesClientes(){
        
        this.agregar_cliente.setEnabled(false);
        this.borrar_cliente.setEnabled(false);
        this.modificar_cliente.setEnabled(false);
        this.seleccionar_cliente.setEnabled(false);
    }
    
    public void habilitarBotonesClientes(){
        
        this.agregar_cliente.setEnabled(true);
        this.borrar_cliente.setEnabled(true);
        this.modificar_cliente.setEnabled(true);
        this.seleccionar_cliente.setEnabled(true);
    }
    
    public void vaciarTextAreasClientes(){
        
        this.nombre_del_cliente.setText("");
        this.coste_de_la_comida.setText("");
        this.reserva_cliente.removeAllItems();
        this.alergio_cliente.removeAllItems();
    }
    
    public void hacerEditableLasAreasDeInsercionClientes(){
        
        this.nombre_del_cliente.setEditable(true);
        this.coste_de_la_comida.setEditable(true);
    }
    
    public void noHacerEditableLasAreasDeInsercionClientes(){
        
        this.nombre_del_cliente.setEditable(false);
        this.coste_de_la_comida.setEditable(false);
    }
    
    public void ponerFondoDeInserciónARojoClientes(){
        
        this.nombre_del_cliente.setBackground(Color.LIGHT_GRAY);
        this.coste_de_la_comida.setBackground(Color.LIGHT_GRAY);
        this.alergio_cliente.setBackground(Color.LIGHT_GRAY);
        this.reserva_cliente.setBackground(Color.LIGHT_GRAY);
    }
    
    public void ponerFondoDeInserciónANormalClientes(){
        
        this.nombre_del_cliente.setBackground(this.lista_de_platos.getBackground());
        this.coste_de_la_comida.setBackground(this.lista_de_platos.getBackground());
        this.alergio_cliente.setBackground(this.lista_de_platos.getBackground());
        this.reserva_cliente.setBackground(this.lista_de_platos.getBackground());
    }
    
    public void agregarClientesAModelo(){
        
        for(int index = 0; index < this.controller.lista_de_clientes.size(); index++){
            
            this.modelo_clientes.addElement(this.controller.lista_de_clientes.get(index).getNombre_cliente());
        }
    }
   
    
    
/*                                                                        MÉTODOS DE MODIFICACIÓN DE LAS ÁREAS DE INSERCIÓN                                                                      */
    
    
/*################################################################################################################################################################################################
                                                      
                                                                                   CÓDIGO DE LA PESTAÑA DE CLIENTES                                                                        
  
  ###############################################################################################################################################################################################*/

    public void ponerOpcionesClientesEnListbox(){
        
        this.alergio_cliente.removeAllItems();
        this.reserva_cliente.removeAllItems();
        
        this.alergio_cliente.addItem("Si");
        this.alergio_cliente.addItem("No");
        this.reserva_cliente.addItem("Si");
        this.reserva_cliente.addItem("No");
    }
    
    public void crearEInsertarCliente(){
        
        Cliente AlbertoChicote;
        
        if(this.controller.lista_de_clientes.size() > 0){
            AlbertoChicote = new Cliente(this.controller.lista_de_clientes.get(this.controller.getClienteListSize() - 1).getId_cliente() + 1, this.nombre_del_cliente.getText(), this.reserva_cliente.getSelectedItem().toString(), this.alergio_cliente.getSelectedItem().toString(), Integer.parseInt(this.coste_de_la_comida.getText()));
        }else{
            AlbertoChicote = new Cliente(1, this.nombre_del_cliente.getText(), this.reserva_cliente.getSelectedItem().toString(), this.alergio_cliente.getSelectedItem().toString(), Integer.parseInt(this.coste_de_la_comida.getText()));
        }
            
        this.modelo_clientes.addElement(AlbertoChicote.getNombre_cliente());
        
        this.controller.addClienteToList(AlbertoChicote);
        
        this.lista_de_clientes.setModel(this.modelo_clientes);
        
        
    }
    
    public void buscarYModificarCliente(){

        this.modelo_clientes.setElementAt(this.nombre_del_cliente.getText(), this.indice_seleccionado);

        this.controller.getClienteAtPosition(this.indice_seleccionado).setNombre_cliente(this.nombre_del_cliente.getText());
        this.controller.getClienteAtPosition(this.indice_seleccionado).setAlergico(this.alergio_cliente.getSelectedItem().toString());
        this.controller.getClienteAtPosition(this.indice_seleccionado).setReserva(this.reserva_cliente.getSelectedItem().toString());
        this.controller.getClienteAtPosition(this.indice_seleccionado).setCoste_de_la_comida(Integer.parseInt(this.coste_de_la_comida.getText()));

        
        this.modelo_clientes.removeAllElements();

        this.agregarClientesAModelo();

        this.lista_de_clientes.setModel(this.modelo_clientes);

        this.seleccionarCliente();
    }
    
    
    public void seleccionarCliente(){
        this.alergio_cliente.removeAllItems();
        this.reserva_cliente.removeAllItems();
        
        for(int index = 0; index < this.controller.getClienteListSize(); index++){
            
            if(this.indice_seleccionado == index){
                
                this.nombre_del_cliente.setText(this.controller.getClienteAtPosition(index).getNombre_cliente());
                this.alergio_cliente.addItem(this.controller.getClienteAtPosition(index).getAlergico());
                this.reserva_cliente.addItem(this.controller.getClienteAtPosition(index).getReserva());
                this.coste_de_la_comida.setText(String.valueOf(this.controller.getClienteAtPosition(index).getCoste_de_la_comida()));

            }
        }
    }
    
    
    
 /*################################################################################################################################################################################################
                                                      
                                                            CÓDIGO DE LA PESTAÑA DE CLIENTES                                                                        
  
  ###############################################################################################################################################################################################*/    
    
    
    private void agregar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregar_clienteActionPerformed
        this.deshabilitarBotonesClientes();

        this.vaciarTextAreasClientes();
        
        this.ponerOpcionesClientesEnListbox();

        this.ponerFondoDeInserciónARojoClientes();

        this.panel_de_introduccion_clientes.setBackground(Color.GRAY);

        this.hacerEditableLasAreasDeInsercionClientes();
    }//GEN-LAST:event_agregar_clienteActionPerformed

    private void borrar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrar_clienteActionPerformed
        this.indice_seleccionado = this.lista_de_clientes.getSelectedIndex();
        
        this.modelo_clientes.remove(this.indice_seleccionado);
        this.controller.removeClienteAt(this.indice_seleccionado);

        this.vaciarTextAreasClientes();
    }//GEN-LAST:event_borrar_clienteActionPerformed

    private void seleccionar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionar_clienteActionPerformed
        this.indice_seleccionado = this.lista_de_clientes.getSelectedIndex();
        
        this.seleccionarCliente();
    }//GEN-LAST:event_seleccionar_clienteActionPerformed

    private void guardar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_clienteActionPerformed
        if(this.nombre_del_cliente.getText() != "" && this.coste_de_la_comida.getText() != ""){

            if(this.panel_de_introduccion_clientes.getBackground() == Color.GRAY){

                this.crearEInsertarCliente();

            }else if(this.panel_de_introduccion_clientes.getBackground() == Color.DARK_GRAY){

                this.buscarYModificarCliente();
            }

            this.panel_de_introduccion_clientes.setBackground(this.Clientes.getBackground());

            this.habilitarBotonesClientes();
            
            this.ponerFondoDeInserciónANormalClientes();
            
            this.noHacerEditableLasAreasDeInsercionClientes();
        }
    }//GEN-LAST:event_guardar_clienteActionPerformed

    private void salir_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir_clienteActionPerformed
        
        /*try {
            this.controller.guardarEnFircheroTodosLosDatos();
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        try {
            this.controller.guardarTodosLosDatosEnXML();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_salir_clienteActionPerformed

    private void modificar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificar_clienteActionPerformed
        if(this.lista_de_clientes.getSelectedIndex() != -1){
            
            this.seleccionarCliente();
            
            this.ponerOpcionesClientesEnListbox();

            this.deshabilitarBotonesClientes();

            this.ponerFondoDeInserciónARojoClientes();

            this.panel_de_introduccion_clientes.setBackground(Color.DARK_GRAY);

            this.hacerEditableLasAreasDeInsercionClientes();
            
            this.indice_seleccionado = this.lista_de_clientes.getSelectedIndex();
            
        }
    }//GEN-LAST:event_modificar_clienteActionPerformed

    private void boton_cancelar_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_cancelar_clienteActionPerformed
        this.vaciarTextAreasClientes();
        this.noHacerEditableLasAreasDeInsercionClientes();
        this.habilitarBotonesClientes();
        this.ponerFondoDeInserciónANormalClientes();
        this.panel_de_introduccion_restaurantes.setBackground(this.Restaurantes.getBackground());
        this.panel_de_introduccion_clientes.setBackground(this.Clientes.getBackground());
    }//GEN-LAST:event_boton_cancelar_clienteActionPerformed

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Interfaz().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }catch (SAXException ex) {
                    Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JPanel Clientes;
    protected javax.swing.JPanel Cocineros;
    private javax.swing.JTabbedPane Panel_platos;
    private javax.swing.JPanel Platos;
    private javax.swing.JPanel Restaurantes;
    protected javax.swing.JButton Salir;
    protected javax.swing.JTextArea aforo_maximo;
    protected javax.swing.JButton agregar_cliente;
    protected javax.swing.JButton agregar_cocinero;
    protected javax.swing.JButton agregar_plato;
    protected javax.swing.JButton agregar_restaurante;
    private javax.swing.JComboBox<String> alergio_cliente;
    protected javax.swing.JButton borrar_cliente;
    protected javax.swing.JButton borrar_cocinero;
    protected javax.swing.JButton borrar_plato;
    protected javax.swing.JButton borrar_restaurante;
    private javax.swing.JButton boton_cancelar_cliente;
    private javax.swing.JButton boton_cancelar_cocinero;
    private javax.swing.JButton boton_cancelar_plato;
    private javax.swing.JButton boton_cancelar_restaurante;
    private javax.swing.JComboBox<String> clientes_que_pagan_en_restaurante;
    protected javax.swing.JTextArea coste_de_la_comida;
    protected javax.swing.JTextArea direccion_del_restaurante;
    protected javax.swing.JTextArea especialidad_cocinero;
    protected javax.swing.JButton guardar_cliente;
    protected javax.swing.JButton guardar_cocinero;
    protected javax.swing.JButton guardar_plato;
    protected javax.swing.JButton guardar_restaurante;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    protected javax.swing.JList<String> lista_de_clientes;
    protected javax.swing.JList<String> lista_de_cocineros;
    private javax.swing.JList<String> lista_de_platos;
    private javax.swing.JList<String> lista_de_restaurantes;
    protected javax.swing.JButton modificar_cliente;
    protected javax.swing.JButton modificar_cocinero;
    protected javax.swing.JButton modificar_plato;
    protected javax.swing.JButton modificar_restaurante;
    protected javax.swing.JTextArea nombre_del_cliente;
    protected javax.swing.JTextArea nombre_del_cocinero;
    protected javax.swing.JTextArea nombre_del_plato;
    protected javax.swing.JTextArea nombre_del_restaurante;
    protected javax.swing.JTextArea num_ingredientes_plato;
    protected javax.swing.JTextArea numero_de_empleados;
    protected javax.swing.JTextArea numero_de_premios;
    private javax.swing.JPanel panel_de_introduccion_clientes;
    private javax.swing.JPanel panel_de_introduccion_cocineros;
    private javax.swing.JPanel panel_de_introduccion_platos;
    private javax.swing.JPanel panel_de_introduccion_restaurantes;
    private javax.swing.JComboBox<String> platos_que_puede_cocinar_cocinero;
    private javax.swing.JComboBox<String> reserva_cliente;
    private javax.swing.JComboBox<String> restaurantes_donde_se_sirve_un_plato;
    protected javax.swing.JTextArea sabor_principal_del_plato;
    protected javax.swing.JTextArea salario_cocinero;
    protected javax.swing.JButton salir_cliente;
    protected javax.swing.JButton salir_plato;
    protected javax.swing.JButton salir_restaurante;
    protected javax.swing.JButton seleccionar_cliente;
    protected javax.swing.JButton seleccionar_cocinero;
    protected javax.swing.JButton seleccionar_plato;
    protected javax.swing.JButton seleccionar_restaurante;
    protected javax.swing.JTextArea tiempo_de_prep_del_plato;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel modelo_cocineros;
    private DefaultListModel modelo_platos;
    private DefaultListModel modelo_restaurantes;
    private DefaultListModel modelo_clientes;
    private Controlador controller;
    private int indice_seleccionado;

}
